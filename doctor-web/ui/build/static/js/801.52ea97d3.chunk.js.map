{"version":3,"file":"static/js/801.52ea97d3.chunk.js","mappings":"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","sources":["lib/utils.js","components/availability/Availability.js","components/common/Loading.js"],"sourcesContent":["export const formatTime = (time) => {\r\n  if (!time) {\r\n    return '00:00';\r\n  }\r\n  let [hours, minutes] = time?.split(':');\r\n  const ampm = hours < 12 ? 'AM' : 'PM';\r\n  hours = hours % 12 || 12;\r\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')} ${ampm}`;\r\n};\r\n\r\nexport const isExpireDate = (bookingDate) => {\r\n  const now = new Date();\r\n  const today = new Date(\r\n    Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()),\r\n  );\r\n  bookingDate = new Date(bookingDate);\r\n  return bookingDate.toISOString() < today.toISOString();\r\n};\r\n\r\nexport const generateTimeOptions = (statEnd) => {\r\n  const times = [];\r\n  const start = new Date(\r\n    0,\r\n    0,\r\n    0,\r\n    statEnd === 'start' ? 0 : 0,\r\n    statEnd === 'start' ? 0 : 30,\r\n    0,\r\n  );\r\n  const end = new Date(\r\n    0,\r\n    0,\r\n    0,\r\n    statEnd === 'start' ? 23 : 24,\r\n    statEnd === 'start' ? 30 : 0,\r\n    0,\r\n  );\r\n\r\n  while (start <= end) {\r\n    const hours = start.getHours() % 12 || 12;\r\n    const minutes = start.getMinutes().toString().padStart(2, '0');\r\n    const ampm = start.getHours() < 12 ? 'AM' : 'PM';\r\n\r\n    times.push({\r\n      value: `${start.getHours()}:${minutes}`,\r\n      label: `${hours.toString().padStart(2, '0')}:${minutes} ${ampm}`,\r\n    });\r\n    start.setMinutes(start.getMinutes() + 30);\r\n  }\r\n\r\n  return times;\r\n};\r\n\r\nexport const prepareAvailabilitySlots = (slots = []) => {\r\n  const results = [];\r\n  for (const slot of slots) {\r\n    if (results[slot?.day?.toLowerCase()]) {\r\n      results[slot?.day?.toLowerCase()].timeSlots.push({\r\n        ...slot,\r\n        start: {\r\n          value: slot?.start_time,\r\n          label: formatTime(slot?.start_time),\r\n        },\r\n        end: {\r\n          value: slot?.end_time,\r\n          label: formatTime(slot?.end_time),\r\n        },\r\n      });\r\n    } else {\r\n      results[slot?.day?.toLowerCase()] = {\r\n        enabled: true,\r\n        day: slot?.day,\r\n        timeSlots: [\r\n          {\r\n            ...slot,\r\n            start: {\r\n              value: slot?.start_time,\r\n              label: formatTime(slot?.start_time),\r\n            },\r\n            end: {\r\n              value: slot?.end_time,\r\n              label: formatTime(slot?.end_time),\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n  return results;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Form,\r\n  InputGroup,\r\n  Dropdown,\r\n  DropdownButton,\r\n  Card,\r\n  Row,\r\n  Col,\r\n} from 'react-bootstrap';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { FaPlus, FaTrash, FaClone } from 'react-icons/fa';\r\nimport './Availability.css';\r\nimport {\r\n  useGetAvailabilitySlotsQuery,\r\n  useSaveAvailabilitySlotsMutation,\r\n} from './../../store/slices';\r\nimport Loader from './../common/Loader';\r\nimport Loading from './../common/Loading';\r\nimport { ToastMessage } from '../../components/common/ToastMessageWrapper';\r\nimport {\r\n  generateTimeOptions,\r\n  prepareAvailabilitySlots,\r\n} from './../../lib/utils';\r\n\r\nconst daysOfWeek = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n\r\nconst initialTimeSlot = {\r\n  start_time: '09:00',\r\n  start: { value: '09:00', label: '09:00 AM' },\r\n  end_time: '17:00',\r\n  end: { value: '17:00', label: '05:00 PM' },\r\n};\r\n\r\nconst startTimeOptions = generateTimeOptions('start');\r\nconst endTimeOptions = generateTimeOptions('end');\r\n\r\nconst Availability = () => {\r\n  const { data, isLoading, isError } = useGetAvailabilitySlotsQuery({});\r\n  const [saveAvailabilitySlots, saveAvailabilitySlotsResult] =\r\n    useSaveAvailabilitySlotsMutation();\r\n  const [availability, setAvailability] = useState(() =>\r\n    daysOfWeek.reduce((results, day) => {\r\n      results[day.toLowerCase()] = {\r\n        day,\r\n        enabled: false,\r\n        timeSlots: [\r\n          {\r\n            day: day.toLowerCase(),\r\n            ...initialTimeSlot,\r\n          },\r\n        ],\r\n      };\r\n      return results;\r\n    }, {}),\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data && !isError) {\r\n      const results = prepareAvailabilitySlots(data);\r\n      setAvailability((prevAvailability) => ({\r\n        ...prevAvailability,\r\n        ...results,\r\n      }));\r\n    }\r\n  }, [data, isError]);\r\n\r\n  const handleToggle = (dayKey) => {\r\n    setAvailability((prev) => ({\r\n      ...prev,\r\n      [dayKey]: {\r\n        ...prev[dayKey],\r\n        enabled: !prev[dayKey].enabled,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleTimeChange = (dayKey, slotIndex, field, value) => {\r\n    const timeData = JSON.parse(value);\r\n\r\n    setAvailability((prev) => {\r\n      const updatedAvailability = { ...prev };\r\n      updatedAvailability[dayKey].timeSlots[slotIndex][field] = timeData;\r\n      updatedAvailability[dayKey].timeSlots[slotIndex][field + '_time'] =\r\n        timeData.value;\r\n\r\n      const startTime =\r\n        updatedAvailability[dayKey].timeSlots[slotIndex].start_time?.split(':');\r\n      let endTime =\r\n        field === 'end' && timeData.value === '0:00' ? '24:00' : timeData.value;\r\n      endTime = endTime?.split(':');\r\n\r\n      const compareTime =\r\n        new Date(0, 0, 0, endTime?.[0], +endTime?.[1]) -\r\n        new Date(0, 0, 0, startTime?.[0], startTime?.[1]);\r\n\r\n      if (field === 'end' && compareTime < 0) {\r\n        ToastMessage({\r\n          title: 'Invalid time slot. Please select correct time',\r\n          message:\r\n            \"You can't select end time smaller than start time and cross the day.\",\r\n          options: { type: 'danger' },\r\n        });\r\n        return prev; // Don't update state if invalid\r\n      }\r\n\r\n      return updatedAvailability;\r\n    });\r\n  };\r\n\r\n  const handleAddSlot = (dayKey) => {\r\n    setAvailability((prev) => ({\r\n      ...prev,\r\n      [dayKey]: {\r\n        ...prev[dayKey],\r\n        timeSlots: [\r\n          ...prev[dayKey].timeSlots,\r\n          {\r\n            ...initialTimeSlot,\r\n            day: dayKey,\r\n          },\r\n        ],\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleRemoveSlot = (dayKey, slotIndex) => {\r\n    setAvailability((prev) => {\r\n      const updatedAvailability = { ...prev };\r\n      updatedAvailability[dayKey].timeSlots.splice(slotIndex, 1);\r\n      if (updatedAvailability[dayKey].timeSlots?.length <= 0) {\r\n        updatedAvailability[dayKey].enabled = false;\r\n      }\r\n      return updatedAvailability;\r\n    });\r\n  };\r\n\r\n  const handleCloneSlot = (dayKey, slotIndex) => {\r\n    setAvailability((prev) => {\r\n      const updatedAvailability = { ...prev };\r\n      const clonedSlot = {\r\n        ...updatedAvailability[dayKey].timeSlots[slotIndex],\r\n      };\r\n      updatedAvailability[dayKey].timeSlots.splice(\r\n        slotIndex + 1,\r\n        0,\r\n        clonedSlot,\r\n      );\r\n      return updatedAvailability;\r\n    });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const payload = [];\r\n    const availabilityData = { ...availability };\r\n    for (const slotKey in availabilityData) {\r\n      const slots = availabilityData[slotKey];\r\n      if (slots?.enabled) {\r\n        payload.push(...slots.timeSlots);\r\n      }\r\n    }\r\n    saveAvailabilitySlots(payload);\r\n  };\r\n\r\n  return (\r\n    <div id=\"availability\">\r\n      <div className=\"container mt-3 d-flex justify-content-center align-items-center\">\r\n        <Loader loading={isLoading} />\r\n        <ToastContainer />\r\n        <Card\r\n          className=\"shadow-sm p-3\"\r\n          style={{ width: '100%', maxWidth: '700px' }}\r\n        >\r\n          <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n            <h1 className=\"text-center mb-0\">Schedule</h1>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={handleSave}\r\n              disabled={saveAvailabilitySlotsResult?.isLoading}\r\n            >\r\n              <Loading loading={saveAvailabilitySlotsResult?.isLoading}>\r\n                Save\r\n              </Loading>\r\n            </Button>\r\n          </div>\r\n          <Form>\r\n            {Object.keys(availability).map((dayKey, dayIndex) => {\r\n              const day = availability[dayKey];\r\n              return (\r\n                <Row\r\n                  key={day.day}\r\n                  className=\"day-container mb-2 align-items-center\"\r\n                >\r\n                  <Col\r\n                    xs={12}\r\n                    sm={3}\r\n                    className=\"d-flex align-items-center mb-2 mb-sm-0\"\r\n                  >\r\n                    <Form.Check\r\n                      type=\"switch\"\r\n                      id={`switch-${day.day}`}\r\n                      label={day.day}\r\n                      checked={day.enabled}\r\n                      onChange={() => handleToggle(dayKey)}\r\n                      className=\"day-switch custom-switch\"\r\n                      style={{ textTransform: 'capitalize' }}\r\n                    />\r\n                  </Col>\r\n                  <Col xs={12} sm={9}>\r\n                    {day.enabled && (\r\n                      <div className=\"time-slots-container\">\r\n                        {day.timeSlots.map((slot, slotIndex) => (\r\n                          <InputGroup\r\n                            key={slotIndex}\r\n                            className=\"mb-2 align-items-center\"\r\n                            size=\"sm\"\r\n                          >\r\n                            <DropdownButton\r\n                              as={InputGroup.Prepend}\r\n                              variant=\"outline-secondary\"\r\n                              title={slot.start?.label}\r\n                              id={`dropdown-start-${dayIndex}-${slotIndex}`}\r\n                              className=\"time-dropdown\"\r\n                              size=\"sm\"\r\n                              onSelect={(value) =>\r\n                                handleTimeChange(\r\n                                  dayKey,\r\n                                  slotIndex,\r\n                                  'start',\r\n                                  value,\r\n                                )\r\n                              }\r\n                            >\r\n                              <div className=\"dropdown-scrollable\">\r\n                                {startTimeOptions.map((time, index) => (\r\n                                  <Dropdown.Item\r\n                                    key={index}\r\n                                    eventKey={JSON.stringify(time)}\r\n                                  >\r\n                                    {time?.label}\r\n                                  </Dropdown.Item>\r\n                                ))}\r\n                              </div>\r\n                            </DropdownButton>\r\n\r\n                            <InputGroup.Text>-</InputGroup.Text>\r\n\r\n                            <DropdownButton\r\n                              as={InputGroup.Append}\r\n                              variant=\"outline-secondary\"\r\n                              title={slot.end?.label}\r\n                              id={`dropdown-end-${dayIndex}-${slotIndex}`}\r\n                              className=\"time-dropdown\"\r\n                              size=\"sm\"\r\n                              onSelect={(value) =>\r\n                                handleTimeChange(\r\n                                  dayKey,\r\n                                  slotIndex,\r\n                                  'end',\r\n                                  value,\r\n                                )\r\n                              }\r\n                            >\r\n                              <div className=\"dropdown-scrollable\">\r\n                                {endTimeOptions.map((time, index) => (\r\n                                  <Dropdown.Item\r\n                                    key={index}\r\n                                    eventKey={JSON.stringify(time)}\r\n                                  >\r\n                                    {time?.label}\r\n                                  </Dropdown.Item>\r\n                                ))}\r\n                              </div>\r\n                            </DropdownButton>\r\n                            <Button\r\n                              variant=\"outline-secondary\"\r\n                              onClick={() => handleCloneSlot(dayKey, slotIndex)}\r\n                              size=\"sm\"\r\n                              className=\"ms-1\"\r\n                            >\r\n                              <FaClone />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outline-danger\"\r\n                              onClick={() =>\r\n                                handleRemoveSlot(dayKey, slotIndex)\r\n                              }\r\n                              size=\"sm\"\r\n                              className=\"ms-1\"\r\n                            >\r\n                              <FaTrash />\r\n                            </Button>\r\n                          </InputGroup>\r\n                        ))}\r\n                        <Button\r\n                          variant=\"outline-primary\"\r\n                          onClick={() => handleAddSlot(dayKey)}\r\n                          size=\"sm\"\r\n                        >\r\n                          <FaPlus className=\"me-1\" /> Add Slot\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n              );\r\n            })}\r\n          </Form>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Availability;\r\n","import { ScaleLoader } from 'react-spinners';\r\n\r\nexport default function Loading(props) {\r\n  if (props?.children) {\r\n    return (\r\n      <div className=\"d-flex flex-col justify-content-center align-items-center gap-1\">\r\n        <ScaleLoader height={25} color={'#18A0FB'} {...props} />\r\n        <strong>{props?.children}</strong>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <ScaleLoader height={25} color={'#18A0FB'} {...props} />;\r\n}\r\n"],"names":["formatTime","time","hours","minutes","split","ampm","concat","toString","padStart","isExpireDate","bookingDate","now","Date","today","UTC","getUTCFullYear","getUTCMonth","getUTCDate","toISOString","generateTimeOptions","statEnd","times","start","end","getHours","getMinutes","push","value","label","setMinutes","prepareAvailabilitySlots","slots","arguments","length","undefined","results","slot","_slot$day","_slot$day2","_slot$day3","day","toLowerCase","timeSlots","_objectSpread","start_time","end_time","enabled","daysOfWeek","initialTimeSlot","startTimeOptions","endTimeOptions","Availability","data","isLoading","isError","useGetAvailabilitySlotsQuery","saveAvailabilitySlots","saveAvailabilitySlotsResult","useSaveAvailabilitySlotsMutation","availability","setAvailability","useState","reduce","useEffect","prevAvailability","handleTimeChange","dayKey","slotIndex","field","timeData","JSON","parse","prev","_updatedAvailability$","_endTime","_endTime2","_endTime3","updatedAvailability","startTime","endTime","compareTime","ToastMessage","title","message","options","type","_jsx","id","children","_jsxs","className","Loader","loading","ToastContainer","Card","style","width","maxWidth","Button","variant","onClick","handleSave","payload","availabilityData","slotKey","disabled","Loading","Form","Object","keys","map","dayIndex","Row","Col","xs","sm","Check","checked","onChange","handleToggle","textTransform","_slot$start","_slot$end","InputGroup","size","DropdownButton","as","Prepend","onSelect","index","Dropdown","Item","eventKey","stringify","Text","Append","handleCloneSlot","clonedSlot","splice","FaClone","handleRemoveSlot","_updatedAvailability$2","FaTrash","handleAddSlot","FaPlus","props","ScaleLoader","height","color"],"sourceRoot":""}