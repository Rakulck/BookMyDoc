{"version":3,"file":"static/js/801.f46ea9dd.chunk.js","mappings":"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","sources":["components/availability/Availability.js","components/common/Loading.js","lib/utils.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Form,\r\n  InputGroup,\r\n  Dropdown,\r\n  DropdownButton,\r\n  Card,\r\n  Row,\r\n  Col,\r\n} from 'react-bootstrap';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { FaPlus, FaTrash, FaClone } from 'react-icons/fa';\r\nimport './Availability.css';\r\nimport {\r\n  useGetAvailabilitySlotsQuery,\r\n  useSaveAvailabilitySlotsMutation,\r\n} from './../../store/slices';\r\nimport Loader from './../common/Loader';\r\nimport Loading from './../common/Loading';\r\nimport { ToastMessage } from '../../components/common/ToastMessageWrapper';\r\nimport {\r\n  generateTimeOptions,\r\n  prepareAvailabilitySlots,\r\n} from './../../lib/utils';\r\n\r\nconst daysOfWeek = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n\r\nconst initialTimeSlot = {\r\n  start_time: '09:00',\r\n  start: { value: '09:00', label: '09:00 AM' },\r\n  end_time: '17:00',\r\n  end: { value: '17:00', label: '05:00 PM' },\r\n};\r\n\r\nconst startTimeOptions = generateTimeOptions('start');\r\nconst endTimeOptions = generateTimeOptions('end');\r\n\r\nconst Availability = () => {\r\n  const { data, isLoading, isError } = useGetAvailabilitySlotsQuery({});\r\n  const [saveAvailabilitySlots, saveAvailabilitySlotsResult] =\r\n    useSaveAvailabilitySlotsMutation();\r\n  const [availability, setAvailability] = useState(() =>\r\n    daysOfWeek.reduce((results, day) => {\r\n      results[day.toLowerCase()] = {\r\n        day,\r\n        enabled: false,\r\n        timeSlots: [\r\n          {\r\n            day: day.toLowerCase(),\r\n            ...initialTimeSlot,\r\n          },\r\n        ],\r\n      };\r\n      return results;\r\n    }, {}),\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data && !isError) {\r\n      const results = prepareAvailabilitySlots(data);\r\n      setAvailability((prevAvailability) => ({\r\n        ...prevAvailability,\r\n        ...results,\r\n      }));\r\n    }\r\n  }, [data, isError]);\r\n\r\n  const handleToggle = (dayKey) => {\r\n    setAvailability((prev) => ({\r\n      ...prev,\r\n      [dayKey]: {\r\n        ...prev[dayKey],\r\n        enabled: !prev[dayKey].enabled,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleTimeChange = (dayKey, slotIndex, field, value) => {\r\n    const timeData = JSON.parse(value);\r\n\r\n    setAvailability((prev) => {\r\n      const updatedAvailability = { ...prev };\r\n      updatedAvailability[dayKey].timeSlots[slotIndex][field] = timeData;\r\n      updatedAvailability[dayKey].timeSlots[slotIndex][field + '_time'] =\r\n        timeData.value;\r\n\r\n      const startTime =\r\n        updatedAvailability[dayKey].timeSlots[slotIndex].start_time?.split(':');\r\n      let endTime =\r\n        field === 'end' && timeData.value === '0:00' ? '24:00' : timeData.value;\r\n      endTime = endTime?.split(':');\r\n\r\n      const compareTime =\r\n        new Date(0, 0, 0, endTime?.[0], +endTime?.[1]) -\r\n        new Date(0, 0, 0, startTime?.[0], startTime?.[1]);\r\n\r\n      if (field === 'end' && compareTime < 0) {\r\n        ToastMessage({\r\n          title: 'Invalid time slot. Please select correct time',\r\n          message:\r\n            \"You can't select end time smaller than start time and cross the day.\",\r\n          options: { type: 'danger' },\r\n        });\r\n        return prev; // Don't update state if invalid\r\n      }\r\n\r\n      return updatedAvailability;\r\n    });\r\n  };\r\n\r\n  const handleAddSlot = (dayKey) => {\r\n    setAvailability((prev) => ({\r\n      ...prev,\r\n      [dayKey]: {\r\n        ...prev[dayKey],\r\n        timeSlots: [\r\n          ...prev[dayKey].timeSlots,\r\n          {\r\n            ...initialTimeSlot,\r\n            day: dayKey,\r\n          },\r\n        ],\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleRemoveSlot = (dayKey, slotIndex) => {\r\n    setAvailability((prev) => {\r\n      const updatedAvailability = { ...prev };\r\n      updatedAvailability[dayKey].timeSlots.splice(slotIndex, 1);\r\n      if (updatedAvailability[dayKey].timeSlots?.length <= 0) {\r\n        updatedAvailability[dayKey].enabled = false;\r\n      }\r\n      return updatedAvailability;\r\n    });\r\n  };\r\n\r\n  const handleCloneSlot = (dayKey, slotIndex) => {\r\n    setAvailability((prev) => {\r\n      const updatedAvailability = { ...prev };\r\n      const clonedSlot = {\r\n        ...updatedAvailability[dayKey].timeSlots[slotIndex],\r\n      };\r\n      updatedAvailability[dayKey].timeSlots.splice(\r\n        slotIndex + 1,\r\n        0,\r\n        clonedSlot,\r\n      );\r\n      return updatedAvailability;\r\n    });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const payload = [];\r\n    const availabilityData = { ...availability };\r\n    for (const slotKey in availabilityData) {\r\n      const slots = availabilityData[slotKey];\r\n      if (slots?.enabled) {\r\n        payload.push(...slots.timeSlots);\r\n      }\r\n    }\r\n    saveAvailabilitySlots(payload);\r\n  };\r\n\r\n  return (\r\n    <div id=\"availability\">\r\n      <div className=\"container mt-3 d-flex justify-content-center align-items-center\">\r\n        <Loader loading={isLoading} />\r\n        <ToastContainer />\r\n        <Card\r\n          className=\"shadow-sm p-3\"\r\n          style={{ width: '100%', maxWidth: '700px' }}\r\n        >\r\n          <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n            <h1 className=\"text-center mb-0\">Schedule</h1>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={handleSave}\r\n              disabled={saveAvailabilitySlotsResult?.isLoading}\r\n            >\r\n              <Loading loading={saveAvailabilitySlotsResult?.isLoading}>\r\n                Save\r\n              </Loading>\r\n            </Button>\r\n          </div>\r\n          <Form>\r\n            {Object.keys(availability).map((dayKey, dayIndex) => {\r\n              const day = availability[dayKey];\r\n              return (\r\n                <Row\r\n                  key={day.day}\r\n                  className=\"day-container mb-2 align-items-center\"\r\n                >\r\n                  <Col\r\n                    xs={12}\r\n                    sm={3}\r\n                    className=\"d-flex align-items-center mb-2 mb-sm-0\"\r\n                  >\r\n                    <Form.Check\r\n                      type=\"switch\"\r\n                      id={`switch-${day.day}`}\r\n                      label={day.day}\r\n                      checked={day.enabled}\r\n                      onChange={() => handleToggle(dayKey)}\r\n                      className=\"day-switch custom-switch\"\r\n                      style={{ textTransform: 'capitalize' }}\r\n                    />\r\n                  </Col>\r\n                  <Col xs={12} sm={9}>\r\n                    {day.enabled && (\r\n                      <div className=\"time-slots-container\">\r\n                        {day.timeSlots.map((slot, slotIndex) => (\r\n                          <InputGroup\r\n                            key={slotIndex}\r\n                            className=\"mb-2 align-items-center\"\r\n                            size=\"sm\"\r\n                          >\r\n                            <DropdownButton\r\n                              as={InputGroup.Prepend}\r\n                              variant=\"outline-secondary\"\r\n                              title={slot.start?.label}\r\n                              id={`dropdown-start-${dayIndex}-${slotIndex}`}\r\n                              className=\"time-dropdown\"\r\n                              size=\"sm\"\r\n                              onSelect={(value) =>\r\n                                handleTimeChange(\r\n                                  dayKey,\r\n                                  slotIndex,\r\n                                  'start',\r\n                                  value,\r\n                                )\r\n                              }\r\n                            >\r\n                              <div className=\"dropdown-scrollable\">\r\n                                {startTimeOptions.map((time, index) => (\r\n                                  <Dropdown.Item\r\n                                    key={index}\r\n                                    eventKey={JSON.stringify(time)}\r\n                                  >\r\n                                    {time?.label}\r\n                                  </Dropdown.Item>\r\n                                ))}\r\n                              </div>\r\n                            </DropdownButton>\r\n\r\n                            <InputGroup.Text>-</InputGroup.Text>\r\n\r\n                            <DropdownButton\r\n                              as={InputGroup.Append}\r\n                              variant=\"outline-secondary\"\r\n                              title={slot.end?.label}\r\n                              id={`dropdown-end-${dayIndex}-${slotIndex}`}\r\n                              className=\"time-dropdown\"\r\n                              size=\"sm\"\r\n                              onSelect={(value) =>\r\n                                handleTimeChange(\r\n                                  dayKey,\r\n                                  slotIndex,\r\n                                  'end',\r\n                                  value,\r\n                                )\r\n                              }\r\n                            >\r\n                              <div className=\"dropdown-scrollable\">\r\n                                {endTimeOptions.map((time, index) => (\r\n                                  <Dropdown.Item\r\n                                    key={index}\r\n                                    eventKey={JSON.stringify(time)}\r\n                                  >\r\n                                    {time?.label}\r\n                                  </Dropdown.Item>\r\n                                ))}\r\n                              </div>\r\n                            </DropdownButton>\r\n                            <Button\r\n                              variant=\"outline-secondary\"\r\n                              onClick={() => handleCloneSlot(dayKey, slotIndex)}\r\n                              size=\"sm\"\r\n                              className=\"ms-1\"\r\n                            >\r\n                              <FaClone />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outline-danger\"\r\n                              onClick={() =>\r\n                                handleRemoveSlot(dayKey, slotIndex)\r\n                              }\r\n                              size=\"sm\"\r\n                              className=\"ms-1\"\r\n                            >\r\n                              <FaTrash />\r\n                            </Button>\r\n                          </InputGroup>\r\n                        ))}\r\n                        <Button\r\n                          variant=\"outline-primary\"\r\n                          onClick={() => handleAddSlot(dayKey)}\r\n                          size=\"sm\"\r\n                        >\r\n                          <FaPlus className=\"me-1\" /> Add Slot\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n              );\r\n            })}\r\n          </Form>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Availability;\r\n","import { ScaleLoader } from 'react-spinners';\r\n\r\nexport default function Loading(props) {\r\n  if (props?.children) {\r\n    return (\r\n      <div className=\"d-flex flex-col justify-content-center align-items-center gap-1\">\r\n        <ScaleLoader height={25} color={'#18A0FB'} {...props} />\r\n        <strong>{props?.children}</strong>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <ScaleLoader height={25} color={'#18A0FB'} {...props} />;\r\n}\r\n","export const formatTime = (time) => {\r\n  if (!time) {\r\n    return '00:00';\r\n  }\r\n  let [hours, minutes] = time?.split(':');\r\n  const ampm = hours < 12 ? 'AM' : 'PM';\r\n  hours = hours % 12 || 12;\r\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')} ${ampm}`;\r\n};\r\n\r\nexport const isExpireDate = (bookingDate) => {\r\n  const now = new Date();\r\n  const today = new Date(\r\n    Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()),\r\n  );\r\n  bookingDate = new Date(bookingDate);\r\n  return bookingDate.toISOString() < today.toISOString();\r\n};\r\n\r\nexport const generateTimeOptions = (statEnd) => {\r\n  const times = [];\r\n  const start = new Date(\r\n    0,\r\n    0,\r\n    0,\r\n    statEnd === 'start' ? 0 : 0,\r\n    statEnd === 'start' ? 0 : 30,\r\n    0,\r\n  );\r\n  const end = new Date(\r\n    0,\r\n    0,\r\n    0,\r\n    statEnd === 'start' ? 23 : 24,\r\n    statEnd === 'start' ? 30 : 0,\r\n    0,\r\n  );\r\n\r\n  while (start <= end) {\r\n    const hours = start.getHours() % 12 || 12;\r\n    const minutes = start.getMinutes().toString().padStart(2, '0');\r\n    const ampm = start.getHours() < 12 ? 'AM' : 'PM';\r\n\r\n    times.push({\r\n      value: `${start.getHours()}:${minutes}`,\r\n      label: `${hours.toString().padStart(2, '0')}:${minutes} ${ampm}`,\r\n    });\r\n    start.setMinutes(start.getMinutes() + 30);\r\n  }\r\n\r\n  return times;\r\n};\r\n\r\nexport const prepareAvailabilitySlots = (slots = []) => {\r\n  const results = [];\r\n  for (const slot of slots) {\r\n    if (results[slot?.day?.toLowerCase()]) {\r\n      results[slot?.day?.toLowerCase()].timeSlots.push({\r\n        ...slot,\r\n        start: {\r\n          value: slot?.start_time,\r\n          label: formatTime(slot?.start_time),\r\n        },\r\n        end: {\r\n          value: slot?.end_time,\r\n          label: formatTime(slot?.end_time),\r\n        },\r\n      });\r\n    } else {\r\n      results[slot?.day?.toLowerCase()] = {\r\n        enabled: true,\r\n        day: slot?.day,\r\n        timeSlots: [\r\n          {\r\n            ...slot,\r\n            start: {\r\n              value: slot?.start_time,\r\n              label: formatTime(slot?.start_time),\r\n            },\r\n            end: {\r\n              value: slot?.end_time,\r\n              label: formatTime(slot?.end_time),\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n  return results;\r\n};\r\n"],"names":["daysOfWeek","initialTimeSlot","start_time","start","value","label","end_time","end","startTimeOptions","generateTimeOptions","endTimeOptions","Availability","data","isLoading","isError","useGetAvailabilitySlotsQuery","saveAvailabilitySlots","saveAvailabilitySlotsResult","useSaveAvailabilitySlotsMutation","availability","setAvailability","useState","reduce","results","day","toLowerCase","enabled","timeSlots","useEffect","prepareAvailabilitySlots","prevAvailability","handleTimeChange","dayKey","slotIndex","field","timeData","JSON","parse","prev","_updatedAvailability$","_endTime","_endTime2","_endTime3","updatedAvailability","startTime","split","endTime","compareTime","Date","ToastMessage","title","message","options","type","_jsx","id","children","_jsxs","className","Loader","loading","ToastContainer","Card","style","width","maxWidth","Button","variant","onClick","handleSave","payload","availabilityData","slotKey","slots","push","disabled","Loading","Form","Object","keys","map","dayIndex","Row","Col","xs","sm","Check","concat","checked","onChange","handleToggle","textTransform","slot","_slot$start","_slot$end","InputGroup","size","DropdownButton","as","Prepend","onSelect","time","index","Dropdown","Item","eventKey","stringify","Text","Append","handleCloneSlot","clonedSlot","splice","FaClone","handleRemoveSlot","_updatedAvailability$2","length","FaTrash","handleAddSlot","FaPlus","props","ScaleLoader","height","color","formatTime","hours","minutes","ampm","toString","padStart","isExpireDate","bookingDate","now","today","UTC","getUTCFullYear","getUTCMonth","getUTCDate","toISOString","statEnd","times","getHours","getMinutes","setMinutes","arguments","undefined","_slot$day","_slot$day2","_slot$day3"],"sourceRoot":""}