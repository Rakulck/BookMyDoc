{"version":3,"file":"static/js/801.4c15df9d.chunk.js","mappings":"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","sources":["components/availability/Availability.js","components/common/Loading.js","lib/utils.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Button,\n  Form,\n  InputGroup,\n  Dropdown,\n  DropdownButton,\n  Card,\n  Row,\n  Col,\n} from 'react-bootstrap';\nimport { ToastContainer } from 'react-toastify';\nimport { FaPlus, FaTrash, FaClone } from 'react-icons/fa';\nimport './Availability.css';\nimport {\n  useGetAvailabilitySlotsQuery,\n  useSaveAvailabilitySlotsMutation,\n} from './../../store/slices';\nimport Loader from './../common/Loader';\nimport Loading from './../common/Loading';\nimport { ToastMessage } from '../../components/common/ToastMessageWrapper';\nimport {\n  generateTimeOptions,\n  prepareAvailabilitySlots,\n} from './../../lib/utils';\n\nconst daysOfWeek = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n];\n\nconst initialTimeSlot = {\n  start_time: '09:00',\n  start: { value: '09:00', label: '09:00 AM' },\n  end_time: '09:00',\n  end: { value: '17:00', label: '05:00 PM' },\n};\n\nconst startTimeOptions = generateTimeOptions('start');\nconst endTimeOptions = generateTimeOptions('end');\n\nconst Availability = () => {\n  const { data, isLoading, isError } = useGetAvailabilitySlotsQuery({});\n  const [saveAvailabilitySlots, saveAvailabilitySlotsResult] =\n    useSaveAvailabilitySlotsMutation();\n  const [availability, setAvailability] = useState(\n    daysOfWeek.reduce((results, day) => {\n      results[day.toLocaleLowerCase()] = {\n        day,\n        enabled: false,\n        timeSlots: [\n          {\n            day: day.toLocaleLowerCase(),\n            ...initialTimeSlot,\n          },\n        ],\n      };\n      return results;\n    }, {}),\n  );\n\n  useEffect(() => {\n    if (data && !isError) {\n      const results = prepareAvailabilitySlots(data);\n      setAvailability({ ...availability, ...results });\n    }\n  }, [data, availability, isError]);\n\n  const handleToggle = (dayKey) => {\n    console.log(dayKey);\n    const updatedAvailability = { ...availability };\n    updatedAvailability[dayKey].enabled = !updatedAvailability[dayKey].enabled;\n    setAvailability(updatedAvailability);\n  };\n\n  const handleTimeChange = (dayKey, slotIndex, field, value) => {\n    const updatedAvailability = { ...availability };\n    const timeData = JSON.parse(value);\n    updatedAvailability[dayKey].timeSlots[slotIndex][field] = timeData;\n    updatedAvailability[dayKey].timeSlots[slotIndex][field + '_time'] =\n      timeData.value;\n    const startTime =\n      updatedAvailability[dayKey].timeSlots[slotIndex].start_time?.split(':');\n\n    let endTime =\n      field === 'end' && timeData.value === '0:00' ? '24:00' : timeData.value;\n    endTime = endTime?.split(':');\n    const compareTime =\n      new Date(0, 0, 0, endTime?.[0], +endTime?.[1]) -\n      new Date(0, 0, 0, startTime?.[0], startTime?.[1]);\n    if (field === 'end' && compareTime < 0) {\n      ToastMessage({\n        title: 'Invalid date slot. Please select correct time',\n        message:\n          \"You can't select end time smaller then stat time and cross the day.\",\n        options: { type: 'danger' },\n      });\n    } else {\n      setAvailability(updatedAvailability);\n    }\n  };\n\n  const handleAddSlot = (dayKey) => {\n    const updatedAvailability = { ...availability };\n    updatedAvailability[dayKey].timeSlots.push({\n      ...initialTimeSlot,\n      day: dayKey,\n    });\n    setAvailability(updatedAvailability);\n  };\n\n  const handleRemoveSlot = (dayKey, slotIndex) => {\n    const updatedAvailability = { ...availability };\n    updatedAvailability[dayKey].timeSlots.splice(slotIndex, 1);\n    if (updatedAvailability[dayKey].timeSlots?.length <= 0) {\n      updatedAvailability[dayKey].enabled = false;\n    }\n    setAvailability(updatedAvailability);\n  };\n\n  const handleCloneSlot = (dayKey, slotIndex) => {\n    const updatedAvailability = { ...availability };\n    const clonedSlot = {\n      ...updatedAvailability[dayKey].timeSlots[slotIndex],\n    };\n    updatedAvailability[dayKey].timeSlots.splice(slotIndex + 1, 0, clonedSlot);\n    setAvailability(updatedAvailability);\n  };\n\n  const handleSave = () => {\n    const payload = [];\n    const data = { ...availability };\n    for (const slotKey in data) {\n      const slots = data[slotKey];\n      if (slots?.enabled) {\n        payload.push(...slots.timeSlots);\n      }\n    }\n    saveAvailabilitySlots(payload);\n  };\n\n  // console.log('availability', availability);\n\n  return (\n    <div id=\"availability\">\n      <div className=\"container mt-4 d-flex justify-content-center align-items-center\">\n        <Loader loading={isLoading} />\n        <ToastContainer />\n        <Card\n          className=\"shadow-lg p-4\"\n          style={{ width: '100%', maxWidth: '800px' }}\n        >\n          <div className=\"d-flex justify-content-between align-items-center mb-4\">\n            <h1 className=\"text-center mb-0\">Set Your Availability</h1>\n            <Button\n              variant=\"primary\"\n              onClick={handleSave}\n              disabled={saveAvailabilitySlotsResult?.isLoading}\n            >\n              <Loading loading={saveAvailabilitySlotsResult?.isLoading}>\n                Save\n              </Loading>\n            </Button>\n          </div>\n          <Form>\n            {Object.keys(availability).map((dayKey, dayIndex) => {\n              const day = availability[dayKey];\n              return (\n                <Row\n                  key={day.day}\n                  className=\"day-container mb-3 align-items-center\"\n                >\n                  <Col xs={3} className=\"d-flex align-items-center\">\n                    <Form.Check\n                      type=\"switch\"\n                      id={`switch-${day.day}`}\n                      label={day.day}\n                      checked={day.enabled}\n                      onChange={() => handleToggle(dayKey)}\n                      className=\"day-switch custom-switch\"\n                      style={{ textTransform: 'capitalize' }}\n                    />\n                  </Col>\n                  <Col xs={9}>\n                    {day.enabled && (\n                      <div className=\"time-slots-container\">\n                        {day.timeSlots.map((slot, slotIndex) => (\n                          <InputGroup\n                            key={slotIndex}\n                            className=\"mb-2 align-items-center\"\n                          >\n                            <DropdownButton\n                              as={InputGroup.Prepend}\n                              variant=\"outline-secondary\"\n                              title={slot.start?.label}\n                              id={`dropdown-start-${dayIndex}-${slotIndex}`}\n                              className=\"time-dropdown\"\n                              onSelect={(value) =>\n                                handleTimeChange(\n                                  dayKey,\n                                  slotIndex,\n                                  'start',\n                                  value,\n                                )\n                              }\n                            >\n                              <div className=\"dropdown-scrollable\">\n                                {startTimeOptions.map((time, index) => (\n                                  <Dropdown.Item\n                                    key={index}\n                                    eventKey={JSON.stringify(time)}\n                                  >\n                                    {time?.label}\n                                  </Dropdown.Item>\n                                ))}\n                              </div>\n                            </DropdownButton>\n\n                            <InputGroup.Text> - </InputGroup.Text>\n\n                            <DropdownButton\n                              as={InputGroup.Append}\n                              variant=\"outline-secondary\"\n                              title={slot.end?.label}\n                              id={`dropdown-end-${dayIndex}-${slotIndex}`}\n                              className=\"time-dropdown\"\n                              onSelect={(value) =>\n                                handleTimeChange(\n                                  dayKey,\n                                  slotIndex,\n                                  'end',\n                                  value,\n                                )\n                              }\n                            >\n                              <div className=\"dropdown-scrollable\">\n                                {endTimeOptions.map((time, index) => (\n                                  <Dropdown.Item\n                                    key={index}\n                                    eventKey={JSON.stringify(time)}\n                                  >\n                                    {time?.label}\n                                  </Dropdown.Item>\n                                ))}\n                              </div>\n                            </DropdownButton>\n                            <Button\n                              variant=\"outline-secondary\"\n                              onClick={() => handleCloneSlot(dayKey, slotIndex)}\n                              className=\"ml-2\"\n                            >\n                              <FaClone />\n                            </Button>\n                            <Button\n                              variant=\"outline-danger\"\n                              onClick={() =>\n                                handleRemoveSlot(dayKey, slotIndex)\n                              }\n                              className=\"ml-2\"\n                            >\n                              <FaTrash />\n                            </Button>\n                          </InputGroup>\n                        ))}\n                        <Button\n                          variant=\"outline-primary\"\n                          onClick={() => handleAddSlot(dayKey)}\n                        >\n                          <FaPlus /> Add Time Slot\n                        </Button>\n                      </div>\n                    )}\n                  </Col>\n                </Row>\n              );\n            })}\n          </Form>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Availability;\n","import { ScaleLoader } from 'react-spinners';\n\nexport default function Loading(props) {\n  if (props?.children) {\n    return (\n      <div className=\"d-flex flex-col justify-content-center align-items-center gap-1\">\n        <ScaleLoader height={25} color={'#18A0FB'} {...props} />\n        <strong>{props?.children}</strong>\n      </div>\n    );\n  }\n\n  return <ScaleLoader height={25} color={'#18A0FB'} {...props} />;\n}\n","export const formatTime = (time) => {\n  if (!time) {\n    return '00:00';\n  }\n  let [hours, minutes] = time?.split(':');\n  const ampm = hours < 12 ? 'AM' : 'PM';\n  hours = hours % 12 || 12;\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')} ${ampm}`;\n};\n\nexport const isExpireDate = (bookingDate) => {\n  const now = new Date();\n  const today = new Date(\n    Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()),\n  );\n  bookingDate = new Date(bookingDate);\n  return bookingDate.toISOString() < today.toISOString();\n};\n\nexport const generateTimeOptions = (statEnd) => {\n  const times = [];\n  const start = new Date(\n    0,\n    0,\n    0,\n    statEnd === 'start' ? 0 : 0,\n    statEnd === 'start' ? 0 : 30,\n    0,\n  );\n  const end = new Date(\n    0,\n    0,\n    0,\n    statEnd === 'start' ? 23 : 24,\n    statEnd === 'start' ? 30 : 0,\n    0,\n  );\n\n  while (start <= end) {\n    const hours = start.getHours() % 12 || 12;\n    const minutes = start.getMinutes().toString().padStart(2, '0');\n    const ampm = start.getHours() < 12 ? 'AM' : 'PM';\n\n    times.push({\n      value: `${start.getHours()}:${minutes}`,\n      label: `${hours.toString().padStart(2, 0)}:${minutes} ${ampm}`,\n    });\n    start.setMinutes(start.getMinutes() + 30);\n  }\n\n  return times;\n};\n\nexport const prepareAvailabilitySlots = (slots = []) => {\n  const results = [];\n  for (const slot of slots) {\n    if (results[slot?.day?.toLocaleLowerCase()]) {\n      results[slot?.day].timeSlots.push({\n        ...slot,\n        start: {\n          value: slot?.start_time,\n          label: formatTime(slot?.start_time),\n        },\n        end: {\n          value: slot?.end_time,\n          label: formatTime(slot?.end_time),\n        },\n      });\n    } else {\n      results[slot?.day?.toLocaleLowerCase()] = {\n        enabled: true,\n        day: slot?.day,\n        timeSlots: [\n          {\n            ...slot,\n            start: {\n              value: slot?.start_time,\n              label: formatTime(slot?.start_time),\n            },\n            end: {\n              value: slot?.end_time,\n              label: formatTime(slot?.end_time),\n            },\n          },\n        ],\n      };\n    }\n  }\n  return results;\n};\n"],"names":["daysOfWeek","initialTimeSlot","start_time","start","value","label","end_time","end","startTimeOptions","generateTimeOptions","endTimeOptions","Availability","data","isLoading","isError","useGetAvailabilitySlotsQuery","saveAvailabilitySlots","saveAvailabilitySlotsResult","useSaveAvailabilitySlotsMutation","availability","setAvailability","useState","reduce","results","day","toLocaleLowerCase","enabled","timeSlots","useEffect","prepareAvailabilitySlots","handleTimeChange","dayKey","slotIndex","field","_updatedAvailability$","_endTime","_endTime2","_endTime3","updatedAvailability","timeData","JSON","parse","startTime","split","endTime","compareTime","Date","ToastMessage","title","message","options","type","_jsx","id","children","_jsxs","className","Loader","loading","ToastContainer","Card","style","width","maxWidth","Button","variant","onClick","handleSave","payload","slotKey","slots","push","disabled","Loading","Form","Object","keys","map","dayIndex","Row","Col","xs","Check","concat","checked","onChange","console","log","handleToggle","textTransform","slot","_slot$start","_slot$end","InputGroup","DropdownButton","as","Prepend","onSelect","time","index","Dropdown","Item","eventKey","stringify","Text","Append","handleCloneSlot","clonedSlot","splice","FaClone","handleRemoveSlot","_updatedAvailability$2","length","FaTrash","handleAddSlot","FaPlus","props","ScaleLoader","height","color","formatTime","hours","minutes","ampm","toString","padStart","isExpireDate","bookingDate","now","today","UTC","getUTCFullYear","getUTCMonth","getUTCDate","toISOString","statEnd","times","getHours","getMinutes","setMinutes","arguments","undefined","_slot$day","_slot$day2"],"sourceRoot":""}